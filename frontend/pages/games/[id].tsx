import GameImage from "@/components/Game/GameImage";
import RatingStars from "@/components/Game/RatingStars";
import PostReviewModal from "@/components/Review/PostReviewModal";
import { ReviewListItem } from "@/components/Review/ReviewListItem";
import StatButton from "@/components/StatButton";
import { createApolloClient } from "@/graphql/client";
import { GameDocument, GameQuery } from "@/graphql/generated/graphql";
import { gql } from "@apollo/client";
import { BookmarkIcon, PaintBrushIcon } from "@heroicons/react/20/solid";
import { format } from "date-fns";
import { GetServerSideProps } from "next";
import { withUserTokenSSR } from "next-firebase-auth";
import Head from "next/head";
import { useState } from "react";

type PageProps = {
  game: GameQuery["game"];
  errorCode: string;
};

export const gameWithReviewsQuery = gql`
  query game($gameId: ID!) {
    game(id: $gameId) {
      id
      title
      imageUrl
      reviewsCount
      clipsCount
      publishedAt
      ratingAverage
      price
      genres {
        id
        name
      }
      publisher {
        id
        name
      }
      platforms {
        id
        name
      }
      reviews {
        ...ReviewListItemFragment
      }
    }
  }
`;

export function Game({ game }: PageProps) {
  return (
    <div>
      <Head>
        <title>{game.title} | clip-games</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col gap-10">
        <GameInfoHero game={game} />
        <ReviewsArea reviews={game.reviews} />
      </div>
    </div>
  );
}

function GameInfoHero({ game }: { game: GameQuery["game"] }) {
  const [isReviewDialogOpen, setIsReviewDialogOpen] = useState(false);
  return (
    <div className="flex gap-10">
      <div className="w-2/5 flex flex-col gap-4">
        <GameImage imageUrl={game.imageUrl || undefined} title={game.title} />
        <div className="flex gap-4">
          <StatButton
            icon={
              <PaintBrushIcon
                className="-ml-0.5 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            }
            label="レビュー"
            stat={`${game.reviewsCount}`}
            onClick={() => setIsReviewDialogOpen(true)}
          />
          <StatButton
            icon={
              <BookmarkIcon
                className="-ml-0.5 h-5 w-5 text-gray-400"
                aria-hidden="true"
              />
            }
            label="クリップ"
            stat={`${game.clipsCount}`}
          />
        </div>
      </div>
      <div className="flex flex-col w-3/5 gap-3 text-gray-100">
        <div className="flex flex-col gap-2">
          {/* Title */}
          <h1 className="text-3xl font-bold">{game.title}</h1>
          {/* PublishedAt */}
          {game.publishedAt && (
            <h3 className="text-lg">
              発売日：{format(new Date(game.publishedAt), "yyyy/MM/dd")}
            </h3>
          )}
        </div>
        {/* Rating */}
        <div className="flex gap-2 items-end">
          <RatingStars rating={game.ratingAverage} size="lg" />
          <div className="text-3xl font-bold">
            {game.ratingAverage?.toFixed(1) || "-"}
          </div>
        </div>
        <div className="flex flex-col gap-1">
          {/* Price */}
          <div className="">{game.price}円</div>
          {/* Genres */}
          <div className="flex gap-2">
            {game.genres.map((genre) => (
              <div key={genre.id} className="text-lg">
                {genre.name}
              </div>
            ))}
          </div>
          <div className="flex gap-1">
            {/* Publisher */}
            <div className="text-lg">{game.publisher.name}</div> |
            {/* Platforms */}
            <div className="flex gap-2">
              {game.platforms.map((platform) => (
                <div key={platform.id} className="text-lg">
                  {platform.name}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
      {/* 後でコンテナでラップする */}
      <PostReviewModal
        gameId={game.id}
        isOpen={isReviewDialogOpen}
        setIsOpen={setIsReviewDialogOpen}
      />
    </div>
  );
}

function ReviewsArea({ reviews }: { reviews: GameQuery["game"]["reviews"] }) {
  return (
    <div className="flex flex-col gap-4">
      <h2 className="text-3xl font-bold text-gray-100">レビュー</h2>
      <div className="flex flex-col gap-4">
        {reviews.map((review, i) => (
          <ReviewListItem key={`review-${i}`} review={review} />
        ))}
      </div>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = withUserTokenSSR()(
  async ({ user, query }) => {
    const { id } = query;
    if (typeof id !== "string") {
      return {
        notFound: true,
      };
    }

    const token = (await user?.getIdToken()) || null;
    const client = createApolloClient(token);

    const { data } = await client.query({
      query: GameDocument,
      variables: {
        gameId: id,
      },
    });
    const game = data.game;
    return { props: { game } };
  }
);
export default Game;
