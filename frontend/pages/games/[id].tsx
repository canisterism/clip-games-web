import { ListItem as ReviewListItem } from "@/components/Review/ListItem";
import { createApolloClient } from "@/graphql/client";
import { GameDocument, GameQuery } from "@/graphql/generated/graphql";
import { gql } from "@apollo/client";
import { format } from "date-fns";
import { GetServerSideProps } from "next";
import { withUserTokenSSR } from "next-firebase-auth";
import Head from "next/head";
import Image from "next/image";

type PageProps = {
  game: GameQuery["game"];
  errorCode: string;
};

export const gameWithReviewsQuery = gql`
  query game($gameId: ID!) {
    game(id: $gameId) {
      id
      title
      imageUrl
      reviewsCount
      clipsCount
      publishedAt
      ratingAverage
      reviews {
        ...ReviewListItemFragment
      }
    }
  }
`;

export function Game({ game }: PageProps) {
  return (
    <div>
      <Head>
        <title>{game.title} | clip-games</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="mx-8 my-4">
        <div className="flex gap-5">
          <div className="flex-col">
            <div className="relative h-96 w-64">
              <Image
                src={game.imageUrl || ""}
                alt={game.title}
                objectFit="cover"
                layout="fill"
              />
            </div>
            <div className="flex-row gap-2">
              <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                {game.reviewsCount}
              </button>
              <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                {game.clipsCount}
              </button>
            </div>
          </div>
          <div className="text-white flex-col ">
            <h1 className="text-2xl font-bold text-gray-100">{game.title}</h1>
            {game.publishedAt && (
              <h3>
                発売日：{format(new Date(game.publishedAt), "yyyy-MM-dd")}
              </h3>
            )}
            {game.ratingAverage}
          </div>
          {/* Reviews */}
          <div className="flex-col">
            {game.reviews.map((review, i) => (
              <ReviewListItem key={i} review={review} />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = withUserTokenSSR()(
  async ({ user, query }) => {
    const { id } = query;
    if (typeof id !== "string") {
      return {
        notFound: true,
      };
    }

    const token = (await user?.getIdToken()) || null;
    const client = createApolloClient(token);

    const { data } = await client.query({
      query: GameDocument,
      variables: {
        gameId: id,
      },
    });
    const game = data.game;
    return { props: { game } };
  }
);
export default Game;
